{"version":3,"sources":["ListItems.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","labelRef","React","createRef","checkBoxChange","event","toDoItem","checkedState","state","isChecked","current","classList","toggle","setState","localStorage","setItem","JSON","stringify","console","log","this","deleteToDo","className","type","defaultChecked","onChange","ref","onClick","title","Component","Todo","inputRef","handleKeyUp","e","key","toDoList","indexOf","value","trim","tempArray","alert","persistedData","parse","getItem","Array","isArray","clear","placeholder","onKeyUp","inputValueEmpty","map","item","index","toDoId","splice","localStorageToDoList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81e0f010.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nclass ListItems extends React.Component {\r\n\tcheckedBoxStateInStorage;\r\n\tlabelRef = React.createRef();\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisChecked: props.checkedState\r\n\t\t};\r\n\t\tconsole.log(this.labelRef);\r\n\t}\r\n\r\n\tcheckBoxChange = event => {\r\n\t\tconst { toDoItem } = this.props;\r\n\t\tlet checkedState = !this.state.isChecked;\r\n\r\n\t\tthis.labelRef.current.classList.toggle('strike-through');\r\n\t\tthis.setState({\r\n\t\t\tisChecked: checkedState\r\n\t\t});\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'checkedOrUnchecked' + toDoItem,\r\n\t\t\tJSON.stringify(checkedState)\r\n\t\t);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { checkedState } = this.props;\r\n\t\tif (checkedState) {\r\n\t\t\tthis.labelRef.current.classList.toggle('strike-through', true);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { toDoItem, deleteToDo } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"to-do-items\">\r\n\t\t\t\t<div className=\"to-do-items-2\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tdefaultChecked={this.state.isChecked}\r\n\t\t\t\t\t\tonChange={this.checkBoxChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label ref={this.labelRef} className=\"to-do-item\">\r\n\t\t\t\t\t\t{toDoItem}\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"delete-todo-button\"\r\n\t\t\t\t\t\tonClick={deleteToDo}\r\n\t\t\t\t\t\ttitle=\"Delete Forever\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<MdDelete />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ListItems;\r\n","import React from 'react';\r\nimport ListItems from './ListItems.js';\r\n\r\nclass Todo extends React.Component {\r\n\tpersistedData;\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttoDoList: []\r\n\t\t};\r\n\t}\r\n\tinputRef = React.createRef();\r\n\thandleKeyUp = e => {\r\n\t\tif (\r\n\t\t\te.key === 'Enter' &&\r\n\t\t\tthis.state.toDoList.indexOf(this.inputRef.current.value.trim()) ===\r\n\t\t\t\t-1\r\n\t\t) {\r\n\t\t\tlet tempArray = [\r\n\t\t\t\t...this.state.toDoList,\r\n\t\t\t\tthis.inputRef.current.value.trim()\r\n\t\t\t];\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoDoList: tempArray\r\n\t\t\t});\r\n\t\t\tthis.inputRef.current.value = this.state.value;\r\n\t\t\tlocalStorage.setItem('toDoData', JSON.stringify(tempArray));\r\n\t\t\tthis.inputRef.current.value = '';\r\n\t\t}\r\n\t\tif (\r\n\t\t\te.key === 'Enter' &&\r\n\t\t\tthis.state.toDoList.indexOf(this.inputRef.current.value.trim()) !==\r\n\t\t\t\t-1\r\n\t\t) {\r\n\t\t\talert(this.inputRef.current.value + ' already needs doing !');\r\n\t\t\tthis.inputRef.current.value = '';\r\n\t\t}\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tthis.persistedData = JSON.parse(localStorage.getItem('toDoData'));\r\n\t\tif (!Array.isArray(this.persistedData)) {\r\n\t\t\tthis.persistedData = [];\r\n\t\t\tlocalStorage.clear();\r\n\t\t}\r\n\t\tif (localStorage.getItem('toDoData')) {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoDoList: this.persistedData\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"to-do-input\"\r\n\t\t\t\t\tref={this.inputRef}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"enter thing that needs doing\"\r\n\t\t\t\t\tonKeyUp={this.handleKeyUp}\r\n\t\t\t\t\tonClick={this.inputValueEmpty}\r\n\t\t\t\t/>\r\n\t\t\t\t<h1>things that need doing</h1>\r\n\t\t\t\t{this.state.toDoList.map((item, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<ListItems\r\n\t\t\t\t\t\t\tcheckedState={JSON.parse(\r\n\t\t\t\t\t\t\t\tlocalStorage.getItem(\r\n\t\t\t\t\t\t\t\t\t'checkedOrUnchecked' + item\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\ttoDoItem={item}\r\n\t\t\t\t\t\t\ttoDoList={this.state.toDoList}\r\n\t\t\t\t\t\t\tkey={`${item}_${index}`}\r\n\t\t\t\t\t\t\ttoDoId={index}\r\n\t\t\t\t\t\t\tdeleteToDo={() => {\r\n\t\t\t\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t\t\t\tthis.state.toDoList.splice(index, 1)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tconst localStorageToDoList = JSON.parse(\r\n\t\t\t\t\t\t\t\t\tlocalStorage.getItem('toDoData')\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tlocalStorageToDoList.splice(index, 1);\r\n\t\t\t\t\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t\t\t\t\t'toDoData',\r\n\t\t\t\t\t\t\t\t\tJSON.stringify(localStorageToDoList)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Todo />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}